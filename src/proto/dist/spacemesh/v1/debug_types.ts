// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "spacemesh/v1/debug_types.proto" (package "spacemesh.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SmesherId } from "./types";
import { LayerNumber } from "./types";
import { SimpleInt } from "./types";
import { Account } from "./global_state_types";
/**
 * @generated from protobuf message spacemesh.v1.AccountsResponse
 */
export interface AccountsResponse {
    /**
     * @generated from protobuf field: repeated spacemesh.v1.Account account_wrapper = 1;
     */
    accountWrapper: Account[];
}
/**
 * @generated from protobuf message spacemesh.v1.NetworkInfoResponse
 */
export interface NetworkInfoResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message spacemesh.v1.EpochData
 */
export interface EpochData {
    /**
     * @generated from protobuf field: bytes beacon = 1;
     */
    beacon: Uint8Array;
}
/**
 * @generated from protobuf message spacemesh.v1.Eligibility
 */
export interface Eligibility {
    /**
     * @generated from protobuf field: uint32 j = 1;
     */
    j: number;
    /**
     * @generated from protobuf field: bytes signature = 2;
     */
    signature: Uint8Array;
}
/**
 * @generated from protobuf message spacemesh.v1.Proposal
 */
export interface Proposal {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * @generated from protobuf field: spacemesh.v1.SimpleInt epoch = 2;
     */
    epoch?: SimpleInt;
    /**
     * @generated from protobuf field: spacemesh.v1.LayerNumber layer = 3;
     */
    layer?: LayerNumber;
    /**
     * @generated from protobuf field: spacemesh.v1.SmesherId smesher = 4;
     */
    smesher?: SmesherId;
    /**
     * @generated from protobuf oneof: epoch_data
     */
    epochData: {
        oneofKind: "reference";
        /**
         * @generated from protobuf field: bytes reference = 5;
         */
        reference: Uint8Array;
    } | {
        oneofKind: "data";
        /**
         * @generated from protobuf field: spacemesh.v1.EpochData data = 6;
         */
        data: EpochData;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: bytes ballot = 7;
     */
    ballot: Uint8Array;
    /**
     * @generated from protobuf field: repeated spacemesh.v1.Eligibility eligibilities = 8;
     */
    eligibilities: Eligibility[];
    /**
     * @generated from protobuf field: spacemesh.v1.Proposal.Status status = 9;
     */
    status: Proposal_Status;
}
/**
 * @generated from protobuf enum spacemesh.v1.Proposal.Status
 */
export enum Proposal_Status {
    /**
     * @generated from protobuf enum value: Created = 0;
     */
    Created = 0,
    /**
     * @generated from protobuf enum value: Included = 1;
     */
    Included = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class AccountsResponse$Type extends MessageType<AccountsResponse> {
    constructor() {
        super("spacemesh.v1.AccountsResponse", [
            { no: 1, name: "account_wrapper", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Account }
        ]);
    }
    create(value?: PartialMessage<AccountsResponse>): AccountsResponse {
        const message = { accountWrapper: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AccountsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AccountsResponse): AccountsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated spacemesh.v1.Account account_wrapper */ 1:
                    message.accountWrapper.push(Account.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AccountsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated spacemesh.v1.Account account_wrapper = 1; */
        for (let i = 0; i < message.accountWrapper.length; i++)
            Account.internalBinaryWrite(message.accountWrapper[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.AccountsResponse
 */
export const AccountsResponse = new AccountsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NetworkInfoResponse$Type extends MessageType<NetworkInfoResponse> {
    constructor() {
        super("spacemesh.v1.NetworkInfoResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NetworkInfoResponse>): NetworkInfoResponse {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NetworkInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NetworkInfoResponse): NetworkInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NetworkInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.NetworkInfoResponse
 */
export const NetworkInfoResponse = new NetworkInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EpochData$Type extends MessageType<EpochData> {
    constructor() {
        super("spacemesh.v1.EpochData", [
            { no: 1, name: "beacon", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<EpochData>): EpochData {
        const message = { beacon: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EpochData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EpochData): EpochData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes beacon */ 1:
                    message.beacon = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EpochData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes beacon = 1; */
        if (message.beacon.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.beacon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.EpochData
 */
export const EpochData = new EpochData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Eligibility$Type extends MessageType<Eligibility> {
    constructor() {
        super("spacemesh.v1.Eligibility", [
            { no: 1, name: "j", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "signature", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Eligibility>): Eligibility {
        const message = { j: 0, signature: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Eligibility>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Eligibility): Eligibility {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 j */ 1:
                    message.j = reader.uint32();
                    break;
                case /* bytes signature */ 2:
                    message.signature = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Eligibility, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 j = 1; */
        if (message.j !== 0)
            writer.tag(1, WireType.Varint).uint32(message.j);
        /* bytes signature = 2; */
        if (message.signature.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.Eligibility
 */
export const Eligibility = new Eligibility$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Proposal$Type extends MessageType<Proposal> {
    constructor() {
        super("spacemesh.v1.Proposal", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "epoch", kind: "message", T: () => SimpleInt },
            { no: 3, name: "layer", kind: "message", T: () => LayerNumber },
            { no: 4, name: "smesher", kind: "message", T: () => SmesherId },
            { no: 5, name: "reference", kind: "scalar", oneof: "epochData", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "data", kind: "message", oneof: "epochData", T: () => EpochData },
            { no: 7, name: "ballot", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 8, name: "eligibilities", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Eligibility },
            { no: 9, name: "status", kind: "enum", T: () => ["spacemesh.v1.Proposal.Status", Proposal_Status] }
        ]);
    }
    create(value?: PartialMessage<Proposal>): Proposal {
        const message = { id: new Uint8Array(0), epochData: { oneofKind: undefined }, ballot: new Uint8Array(0), eligibilities: [], status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Proposal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Proposal): Proposal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* spacemesh.v1.SimpleInt epoch */ 2:
                    message.epoch = SimpleInt.internalBinaryRead(reader, reader.uint32(), options, message.epoch);
                    break;
                case /* spacemesh.v1.LayerNumber layer */ 3:
                    message.layer = LayerNumber.internalBinaryRead(reader, reader.uint32(), options, message.layer);
                    break;
                case /* spacemesh.v1.SmesherId smesher */ 4:
                    message.smesher = SmesherId.internalBinaryRead(reader, reader.uint32(), options, message.smesher);
                    break;
                case /* bytes reference */ 5:
                    message.epochData = {
                        oneofKind: "reference",
                        reference: reader.bytes()
                    };
                    break;
                case /* spacemesh.v1.EpochData data */ 6:
                    message.epochData = {
                        oneofKind: "data",
                        data: EpochData.internalBinaryRead(reader, reader.uint32(), options, (message.epochData as any).data)
                    };
                    break;
                case /* bytes ballot */ 7:
                    message.ballot = reader.bytes();
                    break;
                case /* repeated spacemesh.v1.Eligibility eligibilities */ 8:
                    message.eligibilities.push(Eligibility.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* spacemesh.v1.Proposal.Status status */ 9:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Proposal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* spacemesh.v1.SimpleInt epoch = 2; */
        if (message.epoch)
            SimpleInt.internalBinaryWrite(message.epoch, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* spacemesh.v1.LayerNumber layer = 3; */
        if (message.layer)
            LayerNumber.internalBinaryWrite(message.layer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* spacemesh.v1.SmesherId smesher = 4; */
        if (message.smesher)
            SmesherId.internalBinaryWrite(message.smesher, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bytes reference = 5; */
        if (message.epochData.oneofKind === "reference")
            writer.tag(5, WireType.LengthDelimited).bytes(message.epochData.reference);
        /* spacemesh.v1.EpochData data = 6; */
        if (message.epochData.oneofKind === "data")
            EpochData.internalBinaryWrite(message.epochData.data, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* bytes ballot = 7; */
        if (message.ballot.length)
            writer.tag(7, WireType.LengthDelimited).bytes(message.ballot);
        /* repeated spacemesh.v1.Eligibility eligibilities = 8; */
        for (let i = 0; i < message.eligibilities.length; i++)
            Eligibility.internalBinaryWrite(message.eligibilities[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* spacemesh.v1.Proposal.Status status = 9; */
        if (message.status !== 0)
            writer.tag(9, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.Proposal
 */
export const Proposal = new Proposal$Type();
