// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "spacemesh/v1/node_types.proto" (package "spacemesh.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LayerNumber } from "./types";
import { Status } from "../../google/rpc/status";
import { SimpleString } from "./types";
/**
 * @generated from protobuf message spacemesh.v1.EchoRequest
 */
export interface EchoRequest {
    /**
     * @generated from protobuf field: spacemesh.v1.SimpleString msg = 1;
     */
    msg?: SimpleString;
}
/**
 * @generated from protobuf message spacemesh.v1.EchoResponse
 */
export interface EchoResponse {
    /**
     * @generated from protobuf field: spacemesh.v1.SimpleString msg = 1;
     */
    msg?: SimpleString;
}
/**
 * @generated from protobuf message spacemesh.v1.VersionResponse
 */
export interface VersionResponse {
    /**
     * @generated from protobuf field: spacemesh.v1.SimpleString version_string = 1;
     */
    versionString?: SimpleString;
}
/**
 * @generated from protobuf message spacemesh.v1.BuildResponse
 */
export interface BuildResponse {
    /**
     * @generated from protobuf field: spacemesh.v1.SimpleString build_string = 1;
     */
    buildString?: SimpleString;
}
/**
 * @generated from protobuf message spacemesh.v1.SyncStartRequest
 */
export interface SyncStartRequest {
}
/**
 * @generated from protobuf message spacemesh.v1.SyncStartResponse
 */
export interface SyncStartResponse {
    /**
     * @generated from protobuf field: google.rpc.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message spacemesh.v1.ShutdownRequest
 */
export interface ShutdownRequest {
}
/**
 * @generated from protobuf message spacemesh.v1.ShutdownResponse
 */
export interface ShutdownResponse {
    /**
     * @generated from protobuf field: google.rpc.Status status = 1;
     */
    status?: Status;
}
/**
 * current node status
 *
 * @generated from protobuf message spacemesh.v1.NodeStatus
 */
export interface NodeStatus {
    /**
     * @generated from protobuf field: uint64 connected_peers = 1;
     */
    connectedPeers: bigint; // number of connected neighbors
    /**
     * @generated from protobuf field: bool is_synced = 2;
     */
    isSynced: boolean; // true when meshed is synced
    /**
     * @generated from protobuf field: spacemesh.v1.LayerNumber synced_layer = 3;
     */
    syncedLayer?: LayerNumber; // the last layer node has synced
    /**
     * @generated from protobuf field: spacemesh.v1.LayerNumber top_layer = 4;
     */
    topLayer?: LayerNumber; // top layer is the tip
    /**
     * @generated from protobuf field: spacemesh.v1.LayerNumber verified_layer = 5;
     */
    verifiedLayer?: LayerNumber; // the last layer node has verified
}
/**
 * @generated from protobuf message spacemesh.v1.StatusRequest
 */
export interface StatusRequest {
}
/**
 * @generated from protobuf message spacemesh.v1.StatusResponse
 */
export interface StatusResponse {
    /**
     * @generated from protobuf field: spacemesh.v1.NodeStatus status = 1;
     */
    status?: NodeStatus;
}
/**
 * @generated from protobuf message spacemesh.v1.UpdatePoetServerRequest
 */
export interface UpdatePoetServerRequest {
    /**
     * @generated from protobuf field: string url = 1;
     */
    url: string;
}
/**
 * @generated from protobuf message spacemesh.v1.UpdatePoetServerResponse
 */
export interface UpdatePoetServerResponse {
    /**
     * @generated from protobuf field: google.rpc.Status status = 1;
     */
    status?: Status;
}
/**
 * @generated from protobuf message spacemesh.v1.StatusStreamRequest
 */
export interface StatusStreamRequest {
}
/**
 * @generated from protobuf message spacemesh.v1.StatusStreamResponse
 */
export interface StatusStreamResponse {
    /**
     * @generated from protobuf field: spacemesh.v1.NodeStatus status = 1;
     */
    status?: NodeStatus;
}
/**
 * @generated from protobuf message spacemesh.v1.NodeError
 */
export interface NodeError {
    /**
     * @generated from protobuf field: spacemesh.v1.LogLevel level = 1;
     */
    level: LogLevel;
    /**
     * @generated from protobuf field: string module = 2;
     */
    module: string;
    /**
     * @generated from protobuf field: string msg = 3;
     */
    msg: string;
    /**
     * @generated from protobuf field: string stack_trace = 4;
     */
    stackTrace: string;
}
/**
 * @generated from protobuf message spacemesh.v1.ErrorStreamRequest
 */
export interface ErrorStreamRequest {
}
/**
 * @generated from protobuf message spacemesh.v1.ErrorStreamResponse
 */
export interface ErrorStreamResponse {
    /**
     * @generated from protobuf field: spacemesh.v1.NodeError error = 1;
     */
    error?: NodeError;
}
/**
 * @generated from protobuf enum spacemesh.v1.LogLevel
 */
export enum LogLevel {
    /**
     * @generated from protobuf enum value: LOG_LEVEL_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_DEBUG = 1;
     */
    DEBUG = 1,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_INFO = 2;
     */
    INFO = 2,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_WARN = 3;
     */
    WARN = 3,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_ERROR = 4;
     */
    ERROR = 4,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_DPANIC = 5;
     */
    DPANIC = 5,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_PANIC = 6;
     */
    PANIC = 6,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_FATAL = 7;
     */
    FATAL = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class EchoRequest$Type extends MessageType<EchoRequest> {
    constructor() {
        super("spacemesh.v1.EchoRequest", [
            { no: 1, name: "msg", kind: "message", T: () => SimpleString }
        ]);
    }
    create(value?: PartialMessage<EchoRequest>): EchoRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EchoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EchoRequest): EchoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spacemesh.v1.SimpleString msg */ 1:
                    message.msg = SimpleString.internalBinaryRead(reader, reader.uint32(), options, message.msg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EchoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spacemesh.v1.SimpleString msg = 1; */
        if (message.msg)
            SimpleString.internalBinaryWrite(message.msg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.EchoRequest
 */
export const EchoRequest = new EchoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EchoResponse$Type extends MessageType<EchoResponse> {
    constructor() {
        super("spacemesh.v1.EchoResponse", [
            { no: 1, name: "msg", kind: "message", T: () => SimpleString }
        ]);
    }
    create(value?: PartialMessage<EchoResponse>): EchoResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EchoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EchoResponse): EchoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spacemesh.v1.SimpleString msg */ 1:
                    message.msg = SimpleString.internalBinaryRead(reader, reader.uint32(), options, message.msg);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EchoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spacemesh.v1.SimpleString msg = 1; */
        if (message.msg)
            SimpleString.internalBinaryWrite(message.msg, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.EchoResponse
 */
export const EchoResponse = new EchoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VersionResponse$Type extends MessageType<VersionResponse> {
    constructor() {
        super("spacemesh.v1.VersionResponse", [
            { no: 1, name: "version_string", kind: "message", T: () => SimpleString }
        ]);
    }
    create(value?: PartialMessage<VersionResponse>): VersionResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VersionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VersionResponse): VersionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spacemesh.v1.SimpleString version_string */ 1:
                    message.versionString = SimpleString.internalBinaryRead(reader, reader.uint32(), options, message.versionString);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VersionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spacemesh.v1.SimpleString version_string = 1; */
        if (message.versionString)
            SimpleString.internalBinaryWrite(message.versionString, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.VersionResponse
 */
export const VersionResponse = new VersionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuildResponse$Type extends MessageType<BuildResponse> {
    constructor() {
        super("spacemesh.v1.BuildResponse", [
            { no: 1, name: "build_string", kind: "message", T: () => SimpleString }
        ]);
    }
    create(value?: PartialMessage<BuildResponse>): BuildResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuildResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuildResponse): BuildResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spacemesh.v1.SimpleString build_string */ 1:
                    message.buildString = SimpleString.internalBinaryRead(reader, reader.uint32(), options, message.buildString);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuildResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spacemesh.v1.SimpleString build_string = 1; */
        if (message.buildString)
            SimpleString.internalBinaryWrite(message.buildString, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.BuildResponse
 */
export const BuildResponse = new BuildResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SyncStartRequest$Type extends MessageType<SyncStartRequest> {
    constructor() {
        super("spacemesh.v1.SyncStartRequest", []);
    }
    create(value?: PartialMessage<SyncStartRequest>): SyncStartRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SyncStartRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SyncStartRequest): SyncStartRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SyncStartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.SyncStartRequest
 */
export const SyncStartRequest = new SyncStartRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SyncStartResponse$Type extends MessageType<SyncStartResponse> {
    constructor() {
        super("spacemesh.v1.SyncStartResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<SyncStartResponse>): SyncStartResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SyncStartResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SyncStartResponse): SyncStartResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.rpc.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SyncStartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.rpc.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.SyncStartResponse
 */
export const SyncStartResponse = new SyncStartResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShutdownRequest$Type extends MessageType<ShutdownRequest> {
    constructor() {
        super("spacemesh.v1.ShutdownRequest", []);
    }
    create(value?: PartialMessage<ShutdownRequest>): ShutdownRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShutdownRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShutdownRequest): ShutdownRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ShutdownRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.ShutdownRequest
 */
export const ShutdownRequest = new ShutdownRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShutdownResponse$Type extends MessageType<ShutdownResponse> {
    constructor() {
        super("spacemesh.v1.ShutdownResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<ShutdownResponse>): ShutdownResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShutdownResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShutdownResponse): ShutdownResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.rpc.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShutdownResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.rpc.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.ShutdownResponse
 */
export const ShutdownResponse = new ShutdownResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeStatus$Type extends MessageType<NodeStatus> {
    constructor() {
        super("spacemesh.v1.NodeStatus", [
            { no: 1, name: "connected_peers", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_synced", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "synced_layer", kind: "message", T: () => LayerNumber },
            { no: 4, name: "top_layer", kind: "message", T: () => LayerNumber },
            { no: 5, name: "verified_layer", kind: "message", T: () => LayerNumber }
        ]);
    }
    create(value?: PartialMessage<NodeStatus>): NodeStatus {
        const message = { connectedPeers: 0n, isSynced: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NodeStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NodeStatus): NodeStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 connected_peers */ 1:
                    message.connectedPeers = reader.uint64().toBigInt();
                    break;
                case /* bool is_synced */ 2:
                    message.isSynced = reader.bool();
                    break;
                case /* spacemesh.v1.LayerNumber synced_layer */ 3:
                    message.syncedLayer = LayerNumber.internalBinaryRead(reader, reader.uint32(), options, message.syncedLayer);
                    break;
                case /* spacemesh.v1.LayerNumber top_layer */ 4:
                    message.topLayer = LayerNumber.internalBinaryRead(reader, reader.uint32(), options, message.topLayer);
                    break;
                case /* spacemesh.v1.LayerNumber verified_layer */ 5:
                    message.verifiedLayer = LayerNumber.internalBinaryRead(reader, reader.uint32(), options, message.verifiedLayer);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NodeStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 connected_peers = 1; */
        if (message.connectedPeers !== 0n)
            writer.tag(1, WireType.Varint).uint64(message.connectedPeers);
        /* bool is_synced = 2; */
        if (message.isSynced !== false)
            writer.tag(2, WireType.Varint).bool(message.isSynced);
        /* spacemesh.v1.LayerNumber synced_layer = 3; */
        if (message.syncedLayer)
            LayerNumber.internalBinaryWrite(message.syncedLayer, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* spacemesh.v1.LayerNumber top_layer = 4; */
        if (message.topLayer)
            LayerNumber.internalBinaryWrite(message.topLayer, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* spacemesh.v1.LayerNumber verified_layer = 5; */
        if (message.verifiedLayer)
            LayerNumber.internalBinaryWrite(message.verifiedLayer, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.NodeStatus
 */
export const NodeStatus = new NodeStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatusRequest$Type extends MessageType<StatusRequest> {
    constructor() {
        super("spacemesh.v1.StatusRequest", []);
    }
    create(value?: PartialMessage<StatusRequest>): StatusRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatusRequest): StatusRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.StatusRequest
 */
export const StatusRequest = new StatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatusResponse$Type extends MessageType<StatusResponse> {
    constructor() {
        super("spacemesh.v1.StatusResponse", [
            { no: 1, name: "status", kind: "message", T: () => NodeStatus }
        ]);
    }
    create(value?: PartialMessage<StatusResponse>): StatusResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatusResponse): StatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spacemesh.v1.NodeStatus status */ 1:
                    message.status = NodeStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spacemesh.v1.NodeStatus status = 1; */
        if (message.status)
            NodeStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.StatusResponse
 */
export const StatusResponse = new StatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePoetServerRequest$Type extends MessageType<UpdatePoetServerRequest> {
    constructor() {
        super("spacemesh.v1.UpdatePoetServerRequest", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePoetServerRequest>): UpdatePoetServerRequest {
        const message = { url: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePoetServerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePoetServerRequest): UpdatePoetServerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePoetServerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.UpdatePoetServerRequest
 */
export const UpdatePoetServerRequest = new UpdatePoetServerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePoetServerResponse$Type extends MessageType<UpdatePoetServerResponse> {
    constructor() {
        super("spacemesh.v1.UpdatePoetServerResponse", [
            { no: 1, name: "status", kind: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<UpdatePoetServerResponse>): UpdatePoetServerResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdatePoetServerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePoetServerResponse): UpdatePoetServerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.rpc.Status status */ 1:
                    message.status = Status.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePoetServerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.rpc.Status status = 1; */
        if (message.status)
            Status.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.UpdatePoetServerResponse
 */
export const UpdatePoetServerResponse = new UpdatePoetServerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatusStreamRequest$Type extends MessageType<StatusStreamRequest> {
    constructor() {
        super("spacemesh.v1.StatusStreamRequest", []);
    }
    create(value?: PartialMessage<StatusStreamRequest>): StatusStreamRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StatusStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatusStreamRequest): StatusStreamRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: StatusStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.StatusStreamRequest
 */
export const StatusStreamRequest = new StatusStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatusStreamResponse$Type extends MessageType<StatusStreamResponse> {
    constructor() {
        super("spacemesh.v1.StatusStreamResponse", [
            { no: 1, name: "status", kind: "message", T: () => NodeStatus }
        ]);
    }
    create(value?: PartialMessage<StatusStreamResponse>): StatusStreamResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StatusStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatusStreamResponse): StatusStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spacemesh.v1.NodeStatus status */ 1:
                    message.status = NodeStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatusStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spacemesh.v1.NodeStatus status = 1; */
        if (message.status)
            NodeStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.StatusStreamResponse
 */
export const StatusStreamResponse = new StatusStreamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NodeError$Type extends MessageType<NodeError> {
    constructor() {
        super("spacemesh.v1.NodeError", [
            { no: 1, name: "level", kind: "enum", T: () => ["spacemesh.v1.LogLevel", LogLevel, "LOG_LEVEL_"] },
            { no: 2, name: "module", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "stack_trace", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NodeError>): NodeError {
        const message = { level: 0, module: "", msg: "", stackTrace: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NodeError>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NodeError): NodeError {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spacemesh.v1.LogLevel level */ 1:
                    message.level = reader.int32();
                    break;
                case /* string module */ 2:
                    message.module = reader.string();
                    break;
                case /* string msg */ 3:
                    message.msg = reader.string();
                    break;
                case /* string stack_trace */ 4:
                    message.stackTrace = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NodeError, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spacemesh.v1.LogLevel level = 1; */
        if (message.level !== 0)
            writer.tag(1, WireType.Varint).int32(message.level);
        /* string module = 2; */
        if (message.module !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.module);
        /* string msg = 3; */
        if (message.msg !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        /* string stack_trace = 4; */
        if (message.stackTrace !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.stackTrace);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.NodeError
 */
export const NodeError = new NodeError$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ErrorStreamRequest$Type extends MessageType<ErrorStreamRequest> {
    constructor() {
        super("spacemesh.v1.ErrorStreamRequest", []);
    }
    create(value?: PartialMessage<ErrorStreamRequest>): ErrorStreamRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ErrorStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ErrorStreamRequest): ErrorStreamRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ErrorStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.ErrorStreamRequest
 */
export const ErrorStreamRequest = new ErrorStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ErrorStreamResponse$Type extends MessageType<ErrorStreamResponse> {
    constructor() {
        super("spacemesh.v1.ErrorStreamResponse", [
            { no: 1, name: "error", kind: "message", T: () => NodeError }
        ]);
    }
    create(value?: PartialMessage<ErrorStreamResponse>): ErrorStreamResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ErrorStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ErrorStreamResponse): ErrorStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* spacemesh.v1.NodeError error */ 1:
                    message.error = NodeError.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ErrorStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* spacemesh.v1.NodeError error = 1; */
        if (message.error)
            NodeError.internalBinaryWrite(message.error, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message spacemesh.v1.ErrorStreamResponse
 */
export const ErrorStreamResponse = new ErrorStreamResponse$Type();
