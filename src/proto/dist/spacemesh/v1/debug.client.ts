// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "spacemesh/v1/debug.proto" (package "spacemesh.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DebugService } from "./debug";
import type { Proposal } from "./debug_types";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { AccountsResponse } from "./debug_types";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { NetworkInfoResponse } from "./debug_types";
import type { Empty } from "../../google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * DebugService exposes methods used for mostly debugging and tests
 * NOTE: The endpoints in this service are experimental and subject to change without notice.
 * They should not be used in production.
 *
 * @generated from protobuf service spacemesh.v1.DebugService
 */
export interface IDebugServiceClient {
    /**
     * NetworkInfo returns p2p network information. Mostly required for integration with deployment
     * and testing tooling.
     *
     * @generated from protobuf rpc: NetworkInfo(google.protobuf.Empty) returns (spacemesh.v1.NetworkInfoResponse);
     */
    networkInfo(input: Empty, options?: RpcOptions): UnaryCall<Empty, NetworkInfoResponse>;
    /**
     * Accounts returns data for all the accounts currently in the node's current global state.
     * This includes each account's address, nonce and balance but excludes projection of account state.
     *
     * @generated from protobuf rpc: Accounts(google.protobuf.Empty) returns (spacemesh.v1.AccountsResponse);
     */
    accounts(input: Empty, options?: RpcOptions): UnaryCall<Empty, AccountsResponse>;
    /**
     * ProposalsStream streams all proposals that are confirmed by hare.
     *
     * @generated from protobuf rpc: ProposalsStream(google.protobuf.Empty) returns (stream spacemesh.v1.Proposal);
     */
    proposalsStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, Proposal>;
}
/**
 * DebugService exposes methods used for mostly debugging and tests
 * NOTE: The endpoints in this service are experimental and subject to change without notice.
 * They should not be used in production.
 *
 * @generated from protobuf service spacemesh.v1.DebugService
 */
export class DebugServiceClient implements IDebugServiceClient, ServiceInfo {
    typeName = DebugService.typeName;
    methods = DebugService.methods;
    options = DebugService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * NetworkInfo returns p2p network information. Mostly required for integration with deployment
     * and testing tooling.
     *
     * @generated from protobuf rpc: NetworkInfo(google.protobuf.Empty) returns (spacemesh.v1.NetworkInfoResponse);
     */
    networkInfo(input: Empty, options?: RpcOptions): UnaryCall<Empty, NetworkInfoResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, NetworkInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Accounts returns data for all the accounts currently in the node's current global state.
     * This includes each account's address, nonce and balance but excludes projection of account state.
     *
     * @generated from protobuf rpc: Accounts(google.protobuf.Empty) returns (spacemesh.v1.AccountsResponse);
     */
    accounts(input: Empty, options?: RpcOptions): UnaryCall<Empty, AccountsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, AccountsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * ProposalsStream streams all proposals that are confirmed by hare.
     *
     * @generated from protobuf rpc: ProposalsStream(google.protobuf.Empty) returns (stream spacemesh.v1.Proposal);
     */
    proposalsStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, Proposal> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, Proposal>("serverStreaming", this._transport, method, opt, input);
    }
}
