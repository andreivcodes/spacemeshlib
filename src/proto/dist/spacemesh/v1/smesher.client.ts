// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "spacemesh/v1/smesher.proto" (package "spacemesh.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SmesherService } from "./smesher";
import type { PostConfigResponse } from "./smesher_types";
import type { PostSetupComputeProvidersResponse } from "./smesher_types";
import type { PostSetupComputeProvidersRequest } from "./smesher_types";
import type { PostSetupStatusStreamResponse } from "./smesher_types";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { PostSetupStatusResponse } from "./smesher_types";
import type { EstimatedRewardsResponse } from "./smesher_types";
import type { EstimatedRewardsRequest } from "./smesher_types";
import type { SetMinGasResponse } from "./smesher_types";
import type { SetMinGasRequest } from "./smesher_types";
import type { MinGasResponse } from "./smesher_types";
import type { SetCoinbaseResponse } from "./smesher_types";
import type { SetCoinbaseRequest } from "./smesher_types";
import type { CoinbaseResponse } from "./smesher_types";
import type { SmesherIDResponse } from "./smesher_types";
import type { StopSmeshingResponse } from "./smesher_types";
import type { StopSmeshingRequest } from "./smesher_types";
import type { StartSmeshingResponse } from "./smesher_types";
import type { StartSmeshingRequest } from "./smesher_types";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { IsSmeshingResponse } from "./smesher_types";
import type { Empty } from "../../google/protobuf/empty";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service spacemesh.v1.SmesherService
 */
export interface ISmesherServiceClient {
    /**
     * Returns true iff node is currently smeshing
     *
     * @generated from protobuf rpc: IsSmeshing(google.protobuf.Empty) returns (spacemesh.v1.IsSmeshingResponse);
     */
    isSmeshing(input: Empty, options?: RpcOptions): UnaryCall<Empty, IsSmeshingResponse>;
    /**
     * Starts smeshing, after completing the post setup.
     * Changing of the post setup options (e.g., number of units), after initial setup, is supported.
     * Returns success if request is accepted by node , failure if it fails
     *
     * @generated from protobuf rpc: StartSmeshing(spacemesh.v1.StartSmeshingRequest) returns (spacemesh.v1.StartSmeshingResponse);
     */
    startSmeshing(input: StartSmeshingRequest, options?: RpcOptions): UnaryCall<StartSmeshingRequest, StartSmeshingResponse>;
    /**
     * Stops smeshing, or the preceding post setup session, and optionally attempt to
     * delete the post setup data files(s).
     * Returns success if request is accepted by node, failure if it fails
     *
     * @generated from protobuf rpc: StopSmeshing(spacemesh.v1.StopSmeshingRequest) returns (spacemesh.v1.StopSmeshingResponse);
     */
    stopSmeshing(input: StopSmeshingRequest, options?: RpcOptions): UnaryCall<StopSmeshingRequest, StopSmeshingResponse>;
    /**
     * Get the current smesher id generated by the node
     *
     * @generated from protobuf rpc: SmesherID(google.protobuf.Empty) returns (spacemesh.v1.SmesherIDResponse);
     */
    smesherID(input: Empty, options?: RpcOptions): UnaryCall<Empty, SmesherIDResponse>;
    /**
     * Get the current coinbase
     *
     * @generated from protobuf rpc: Coinbase(google.protobuf.Empty) returns (spacemesh.v1.CoinbaseResponse);
     */
    coinbase(input: Empty, options?: RpcOptions): UnaryCall<Empty, CoinbaseResponse>;
    /**
     * Set the coinbase
     * Returns success if request succeeds, failure if it fails
     *
     * @generated from protobuf rpc: SetCoinbase(spacemesh.v1.SetCoinbaseRequest) returns (spacemesh.v1.SetCoinbaseResponse);
     */
    setCoinbase(input: SetCoinbaseRequest, options?: RpcOptions): UnaryCall<SetCoinbaseRequest, SetCoinbaseResponse>;
    /**
     * Get the current min gas for including txs in blocks by this smesher
     *
     * @generated from protobuf rpc: MinGas(google.protobuf.Empty) returns (spacemesh.v1.MinGasResponse);
     */
    minGas(input: Empty, options?: RpcOptions): UnaryCall<Empty, MinGasResponse>;
    /**
     * Set a min gas units for including txs in blocks by this smesher
     * Returns success if request succeeds, failure if it fails
     *
     * @generated from protobuf rpc: SetMinGas(spacemesh.v1.SetMinGasRequest) returns (spacemesh.v1.SetMinGasResponse);
     */
    setMinGas(input: SetMinGasRequest, options?: RpcOptions): UnaryCall<SetMinGasRequest, SetMinGasResponse>;
    /**
     * Estimate smeshing rewards over the next upcoming epoch
     *
     * @generated from protobuf rpc: EstimatedRewards(spacemesh.v1.EstimatedRewardsRequest) returns (spacemesh.v1.EstimatedRewardsResponse);
     */
    estimatedRewards(input: EstimatedRewardsRequest, options?: RpcOptions): UnaryCall<EstimatedRewardsRequest, EstimatedRewardsResponse>;
    /**
     * Returns the Post setup status
     *
     * @generated from protobuf rpc: PostSetupStatus(google.protobuf.Empty) returns (spacemesh.v1.PostSetupStatusResponse);
     */
    postSetupStatus(input: Empty, options?: RpcOptions): UnaryCall<Empty, PostSetupStatusResponse>;
    /**
     * Returns a stream of updates for the Post setup status
     *
     * @generated from protobuf rpc: PostSetupStatusStream(google.protobuf.Empty) returns (stream spacemesh.v1.PostSetupStatusStreamResponse);
     */
    postSetupStatusStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, PostSetupStatusStreamResponse>;
    /**
     * Returns a list of available Post setup compute providers
     *
     * @generated from protobuf rpc: PostSetupComputeProviders(spacemesh.v1.PostSetupComputeProvidersRequest) returns (spacemesh.v1.PostSetupComputeProvidersResponse);
     */
    postSetupComputeProviders(input: PostSetupComputeProvidersRequest, options?: RpcOptions): UnaryCall<PostSetupComputeProvidersRequest, PostSetupComputeProvidersResponse>;
    /**
     * Returns the Post protocol config
     *
     * @generated from protobuf rpc: PostConfig(google.protobuf.Empty) returns (spacemesh.v1.PostConfigResponse);
     */
    postConfig(input: Empty, options?: RpcOptions): UnaryCall<Empty, PostConfigResponse>;
}
/**
 * @generated from protobuf service spacemesh.v1.SmesherService
 */
export class SmesherServiceClient implements ISmesherServiceClient, ServiceInfo {
    typeName = SmesherService.typeName;
    methods = SmesherService.methods;
    options = SmesherService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Returns true iff node is currently smeshing
     *
     * @generated from protobuf rpc: IsSmeshing(google.protobuf.Empty) returns (spacemesh.v1.IsSmeshingResponse);
     */
    isSmeshing(input: Empty, options?: RpcOptions): UnaryCall<Empty, IsSmeshingResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, IsSmeshingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Starts smeshing, after completing the post setup.
     * Changing of the post setup options (e.g., number of units), after initial setup, is supported.
     * Returns success if request is accepted by node , failure if it fails
     *
     * @generated from protobuf rpc: StartSmeshing(spacemesh.v1.StartSmeshingRequest) returns (spacemesh.v1.StartSmeshingResponse);
     */
    startSmeshing(input: StartSmeshingRequest, options?: RpcOptions): UnaryCall<StartSmeshingRequest, StartSmeshingResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartSmeshingRequest, StartSmeshingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Stops smeshing, or the preceding post setup session, and optionally attempt to
     * delete the post setup data files(s).
     * Returns success if request is accepted by node, failure if it fails
     *
     * @generated from protobuf rpc: StopSmeshing(spacemesh.v1.StopSmeshingRequest) returns (spacemesh.v1.StopSmeshingResponse);
     */
    stopSmeshing(input: StopSmeshingRequest, options?: RpcOptions): UnaryCall<StopSmeshingRequest, StopSmeshingResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StopSmeshingRequest, StopSmeshingResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get the current smesher id generated by the node
     *
     * @generated from protobuf rpc: SmesherID(google.protobuf.Empty) returns (spacemesh.v1.SmesherIDResponse);
     */
    smesherID(input: Empty, options?: RpcOptions): UnaryCall<Empty, SmesherIDResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, SmesherIDResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get the current coinbase
     *
     * @generated from protobuf rpc: Coinbase(google.protobuf.Empty) returns (spacemesh.v1.CoinbaseResponse);
     */
    coinbase(input: Empty, options?: RpcOptions): UnaryCall<Empty, CoinbaseResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, CoinbaseResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set the coinbase
     * Returns success if request succeeds, failure if it fails
     *
     * @generated from protobuf rpc: SetCoinbase(spacemesh.v1.SetCoinbaseRequest) returns (spacemesh.v1.SetCoinbaseResponse);
     */
    setCoinbase(input: SetCoinbaseRequest, options?: RpcOptions): UnaryCall<SetCoinbaseRequest, SetCoinbaseResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetCoinbaseRequest, SetCoinbaseResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Get the current min gas for including txs in blocks by this smesher
     *
     * @generated from protobuf rpc: MinGas(google.protobuf.Empty) returns (spacemesh.v1.MinGasResponse);
     */
    minGas(input: Empty, options?: RpcOptions): UnaryCall<Empty, MinGasResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, MinGasResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Set a min gas units for including txs in blocks by this smesher
     * Returns success if request succeeds, failure if it fails
     *
     * @generated from protobuf rpc: SetMinGas(spacemesh.v1.SetMinGasRequest) returns (spacemesh.v1.SetMinGasResponse);
     */
    setMinGas(input: SetMinGasRequest, options?: RpcOptions): UnaryCall<SetMinGasRequest, SetMinGasResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetMinGasRequest, SetMinGasResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Estimate smeshing rewards over the next upcoming epoch
     *
     * @generated from protobuf rpc: EstimatedRewards(spacemesh.v1.EstimatedRewardsRequest) returns (spacemesh.v1.EstimatedRewardsResponse);
     */
    estimatedRewards(input: EstimatedRewardsRequest, options?: RpcOptions): UnaryCall<EstimatedRewardsRequest, EstimatedRewardsResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<EstimatedRewardsRequest, EstimatedRewardsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the Post setup status
     *
     * @generated from protobuf rpc: PostSetupStatus(google.protobuf.Empty) returns (spacemesh.v1.PostSetupStatusResponse);
     */
    postSetupStatus(input: Empty, options?: RpcOptions): UnaryCall<Empty, PostSetupStatusResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, PostSetupStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns a stream of updates for the Post setup status
     *
     * @generated from protobuf rpc: PostSetupStatusStream(google.protobuf.Empty) returns (stream spacemesh.v1.PostSetupStatusStreamResponse);
     */
    postSetupStatusStream(input: Empty, options?: RpcOptions): ServerStreamingCall<Empty, PostSetupStatusStreamResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, PostSetupStatusStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Returns a list of available Post setup compute providers
     *
     * @generated from protobuf rpc: PostSetupComputeProviders(spacemesh.v1.PostSetupComputeProvidersRequest) returns (spacemesh.v1.PostSetupComputeProvidersResponse);
     */
    postSetupComputeProviders(input: PostSetupComputeProvidersRequest, options?: RpcOptions): UnaryCall<PostSetupComputeProvidersRequest, PostSetupComputeProvidersResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<PostSetupComputeProvidersRequest, PostSetupComputeProvidersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the Post protocol config
     *
     * @generated from protobuf rpc: PostConfig(google.protobuf.Empty) returns (spacemesh.v1.PostConfigResponse);
     */
    postConfig(input: Empty, options?: RpcOptions): UnaryCall<Empty, PostConfigResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, PostConfigResponse>("unary", this._transport, method, opt, input);
    }
}
