// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "spacemesh/v1/global_state.proto" (package "spacemesh.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { GlobalStateService } from "./global_state";
import type { GlobalStateStreamResponse } from "./global_state_types";
import type { GlobalStateStreamRequest } from "./global_state_types";
import type { AppEventStreamResponse } from "./global_state_types";
import type { AppEventStreamRequest } from "./global_state_types";
import type { SmesherRewardStreamResponse } from "./global_state_types";
import type { SmesherRewardStreamRequest } from "./global_state_types";
import type { AccountDataStreamResponse } from "./global_state_types";
import type { AccountDataStreamRequest } from "./global_state_types";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SmesherDataQueryResponse } from "./global_state_types";
import type { SmesherDataQueryRequest } from "./global_state_types";
import type { AccountDataQueryResponse } from "./global_state_types";
import type { AccountDataQueryRequest } from "./global_state_types";
import type { AccountResponse } from "./global_state_types";
import type { AccountRequest } from "./global_state_types";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GlobalStateHashResponse } from "./global_state_types";
import type { GlobalStateHashRequest } from "./global_state_types";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Readonly global state data - current and historical.
 * Global state data is data which is not explicitly stored in the mesh.
 * Global state is modified only by the state transition function.
 *
 * @generated from protobuf service spacemesh.v1.GlobalStateService
 */
export interface IGlobalStateServiceClient {
    /**
     * Latest computed global state - layer and its root hash
     *
     * @generated from protobuf rpc: GlobalStateHash(spacemesh.v1.GlobalStateHashRequest) returns (spacemesh.v1.GlobalStateHashResponse);
     */
    globalStateHash(input: GlobalStateHashRequest, options?: RpcOptions): UnaryCall<GlobalStateHashRequest, GlobalStateHashResponse>;
    /**
     * Account info in the current global state.
     *
     * @generated from protobuf rpc: Account(spacemesh.v1.AccountRequest) returns (spacemesh.v1.AccountResponse);
     */
    account(input: AccountRequest, options?: RpcOptions): UnaryCall<AccountRequest, AccountResponse>;
    /**
     * Query for account related data such as rewards, tx receipts and account info
     *
     * Note: it might be too expensive to add a param for layer to get these results from
     * as it may require indexing all global state changes per account by layer.
     * If it is possible to index by layer then we should add param start_layer to
     * AccountDataParams. Currently it will return data from genesis.
     *
     * @generated from protobuf rpc: AccountDataQuery(spacemesh.v1.AccountDataQueryRequest) returns (spacemesh.v1.AccountDataQueryResponse);
     */
    accountDataQuery(input: AccountDataQueryRequest, options?: RpcOptions): UnaryCall<AccountDataQueryRequest, AccountDataQueryResponse>;
    /**
     * Query for smesher data. Currently returns smesher rewards.
     * Note: Not supporting start_layer yet as it may require to index all rewards by
     * smesher and by layer id or allow for queries from a layer and later....
     *
     * @generated from protobuf rpc: SmesherDataQuery(spacemesh.v1.SmesherDataQueryRequest) returns (spacemesh.v1.SmesherDataQueryResponse);
     */
    smesherDataQuery(input: SmesherDataQueryRequest, options?: RpcOptions): UnaryCall<SmesherDataQueryRequest, SmesherDataQueryResponse>;
    // //////// Streams

    /**
     * Get a stream of account related changes such as account balance change,
     * tx receipts and rewards
     *
     * @generated from protobuf rpc: AccountDataStream(spacemesh.v1.AccountDataStreamRequest) returns (stream spacemesh.v1.AccountDataStreamResponse);
     */
    accountDataStream(input: AccountDataStreamRequest, options?: RpcOptions): ServerStreamingCall<AccountDataStreamRequest, AccountDataStreamResponse>;
    /**
     * Rewards awarded to a smesher id
     *
     * @generated from protobuf rpc: SmesherRewardStream(spacemesh.v1.SmesherRewardStreamRequest) returns (stream spacemesh.v1.SmesherRewardStreamResponse);
     */
    smesherRewardStream(input: SmesherRewardStreamRequest, options?: RpcOptions): ServerStreamingCall<SmesherRewardStreamRequest, SmesherRewardStreamResponse>;
    /**
     * App Events - emitted by app methods impl code trigged by an
     * app transaction
     *
     * @generated from protobuf rpc: AppEventStream(spacemesh.v1.AppEventStreamRequest) returns (stream spacemesh.v1.AppEventStreamResponse);
     */
    appEventStream(input: AppEventStreamRequest, options?: RpcOptions): ServerStreamingCall<AppEventStreamRequest, AppEventStreamResponse>;
    // TODO: we need to add an important method here to return events emitted by
    // a specific app instance...

    /**
     * New global state computed for a layer by the STF
     *
     * @generated from protobuf rpc: GlobalStateStream(spacemesh.v1.GlobalStateStreamRequest) returns (stream spacemesh.v1.GlobalStateStreamResponse);
     */
    globalStateStream(input: GlobalStateStreamRequest, options?: RpcOptions): ServerStreamingCall<GlobalStateStreamRequest, GlobalStateStreamResponse>;
}
/**
 * Readonly global state data - current and historical.
 * Global state data is data which is not explicitly stored in the mesh.
 * Global state is modified only by the state transition function.
 *
 * @generated from protobuf service spacemesh.v1.GlobalStateService
 */
export class GlobalStateServiceClient implements IGlobalStateServiceClient, ServiceInfo {
    typeName = GlobalStateService.typeName;
    methods = GlobalStateService.methods;
    options = GlobalStateService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Latest computed global state - layer and its root hash
     *
     * @generated from protobuf rpc: GlobalStateHash(spacemesh.v1.GlobalStateHashRequest) returns (spacemesh.v1.GlobalStateHashResponse);
     */
    globalStateHash(input: GlobalStateHashRequest, options?: RpcOptions): UnaryCall<GlobalStateHashRequest, GlobalStateHashResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GlobalStateHashRequest, GlobalStateHashResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Account info in the current global state.
     *
     * @generated from protobuf rpc: Account(spacemesh.v1.AccountRequest) returns (spacemesh.v1.AccountResponse);
     */
    account(input: AccountRequest, options?: RpcOptions): UnaryCall<AccountRequest, AccountResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AccountRequest, AccountResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Query for account related data such as rewards, tx receipts and account info
     *
     * Note: it might be too expensive to add a param for layer to get these results from
     * as it may require indexing all global state changes per account by layer.
     * If it is possible to index by layer then we should add param start_layer to
     * AccountDataParams. Currently it will return data from genesis.
     *
     * @generated from protobuf rpc: AccountDataQuery(spacemesh.v1.AccountDataQueryRequest) returns (spacemesh.v1.AccountDataQueryResponse);
     */
    accountDataQuery(input: AccountDataQueryRequest, options?: RpcOptions): UnaryCall<AccountDataQueryRequest, AccountDataQueryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<AccountDataQueryRequest, AccountDataQueryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Query for smesher data. Currently returns smesher rewards.
     * Note: Not supporting start_layer yet as it may require to index all rewards by
     * smesher and by layer id or allow for queries from a layer and later....
     *
     * @generated from protobuf rpc: SmesherDataQuery(spacemesh.v1.SmesherDataQueryRequest) returns (spacemesh.v1.SmesherDataQueryResponse);
     */
    smesherDataQuery(input: SmesherDataQueryRequest, options?: RpcOptions): UnaryCall<SmesherDataQueryRequest, SmesherDataQueryResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SmesherDataQueryRequest, SmesherDataQueryResponse>("unary", this._transport, method, opt, input);
    }
    // //////// Streams

    /**
     * Get a stream of account related changes such as account balance change,
     * tx receipts and rewards
     *
     * @generated from protobuf rpc: AccountDataStream(spacemesh.v1.AccountDataStreamRequest) returns (stream spacemesh.v1.AccountDataStreamResponse);
     */
    accountDataStream(input: AccountDataStreamRequest, options?: RpcOptions): ServerStreamingCall<AccountDataStreamRequest, AccountDataStreamResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AccountDataStreamRequest, AccountDataStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Rewards awarded to a smesher id
     *
     * @generated from protobuf rpc: SmesherRewardStream(spacemesh.v1.SmesherRewardStreamRequest) returns (stream spacemesh.v1.SmesherRewardStreamResponse);
     */
    smesherRewardStream(input: SmesherRewardStreamRequest, options?: RpcOptions): ServerStreamingCall<SmesherRewardStreamRequest, SmesherRewardStreamResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SmesherRewardStreamRequest, SmesherRewardStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * App Events - emitted by app methods impl code trigged by an
     * app transaction
     *
     * @generated from protobuf rpc: AppEventStream(spacemesh.v1.AppEventStreamRequest) returns (stream spacemesh.v1.AppEventStreamResponse);
     */
    appEventStream(input: AppEventStreamRequest, options?: RpcOptions): ServerStreamingCall<AppEventStreamRequest, AppEventStreamResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<AppEventStreamRequest, AppEventStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    // TODO: we need to add an important method here to return events emitted by
    // a specific app instance...

    /**
     * New global state computed for a layer by the STF
     *
     * @generated from protobuf rpc: GlobalStateStream(spacemesh.v1.GlobalStateStreamRequest) returns (stream spacemesh.v1.GlobalStateStreamResponse);
     */
    globalStateStream(input: GlobalStateStreamRequest, options?: RpcOptions): ServerStreamingCall<GlobalStateStreamRequest, GlobalStateStreamResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GlobalStateStreamRequest, GlobalStateStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
