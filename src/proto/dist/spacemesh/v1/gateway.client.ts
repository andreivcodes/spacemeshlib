// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "spacemesh/v1/gateway.proto" (package "spacemesh.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { GatewayService } from "./gateway";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { BroadcastPoetResponse } from "./gateway_types";
import type { BroadcastPoetRequest } from "./gateway_types";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Exposes poet gateway services that can be used by a poet server to broadcast data to the network
 *
 * @generated from protobuf service spacemesh.v1.GatewayService
 */
export interface IGatewayServiceClient {
    /**
     * Submit a poet data packet to the network to broadcast
     *
     * @generated from protobuf rpc: BroadcastPoet(spacemesh.v1.BroadcastPoetRequest) returns (spacemesh.v1.BroadcastPoetResponse);
     */
    broadcastPoet(input: BroadcastPoetRequest, options?: RpcOptions): UnaryCall<BroadcastPoetRequest, BroadcastPoetResponse>;
}
/**
 * Exposes poet gateway services that can be used by a poet server to broadcast data to the network
 *
 * @generated from protobuf service spacemesh.v1.GatewayService
 */
export class GatewayServiceClient implements IGatewayServiceClient, ServiceInfo {
    typeName = GatewayService.typeName;
    methods = GatewayService.methods;
    options = GatewayService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Submit a poet data packet to the network to broadcast
     *
     * @generated from protobuf rpc: BroadcastPoet(spacemesh.v1.BroadcastPoetRequest) returns (spacemesh.v1.BroadcastPoetResponse);
     */
    broadcastPoet(input: BroadcastPoetRequest, options?: RpcOptions): UnaryCall<BroadcastPoetRequest, BroadcastPoetResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<BroadcastPoetRequest, BroadcastPoetResponse>("unary", this._transport, method, opt, input);
    }
}
