// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "spacemesh/v1/node.proto" (package "spacemesh.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { NodeService } from "./node";
import type { ErrorStreamResponse } from "./node_types";
import type { ErrorStreamRequest } from "./node_types";
import type { StatusStreamResponse } from "./node_types";
import type { StatusStreamRequest } from "./node_types";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { UpdatePoetServerResponse } from "./node_types";
import type { UpdatePoetServerRequest } from "./node_types";
import type { ShutdownResponse } from "./node_types";
import type { ShutdownRequest } from "./node_types";
import type { SyncStartResponse } from "./node_types";
import type { SyncStartRequest } from "./node_types";
import type { StatusResponse } from "./node_types";
import type { StatusRequest } from "./node_types";
import type { BuildResponse } from "./node_types";
import type { VersionResponse } from "./node_types";
import type { Empty } from "../../google/protobuf/empty";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { EchoResponse } from "./node_types";
import type { EchoRequest } from "./node_types";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Readonly basic node data
 *
 * @generated from protobuf service spacemesh.v1.NodeService
 */
export interface INodeServiceClient {
    /**
     * A simple test endpoint
     *
     * @generated from protobuf rpc: Echo(spacemesh.v1.EchoRequest) returns (spacemesh.v1.EchoResponse);
     */
    echo(input: EchoRequest, options?: RpcOptions): UnaryCall<EchoRequest, EchoResponse>;
    /**
     * Returns the version of the node software as a semver string
     *
     * @generated from protobuf rpc: Version(google.protobuf.Empty) returns (spacemesh.v1.VersionResponse);
     */
    version(input: Empty, options?: RpcOptions): UnaryCall<Empty, VersionResponse>;
    /**
     * Returns the github commit hash used to build the node
     *
     * @generated from protobuf rpc: Build(google.protobuf.Empty) returns (spacemesh.v1.BuildResponse);
     */
    build(input: Empty, options?: RpcOptions): UnaryCall<Empty, BuildResponse>;
    /**
     * Current node status (net and sync)
     *
     * @generated from protobuf rpc: Status(spacemesh.v1.StatusRequest) returns (spacemesh.v1.StatusResponse);
     */
    status(input: StatusRequest, options?: RpcOptions): UnaryCall<StatusRequest, StatusResponse>;
    /**
     * Request that the node start syncing the mesh
     *
     * @generated from protobuf rpc: SyncStart(spacemesh.v1.SyncStartRequest) returns (spacemesh.v1.SyncStartResponse);
     */
    syncStart(input: SyncStartRequest, options?: RpcOptions): UnaryCall<SyncStartRequest, SyncStartResponse>;
    /**
     * Request that the node initiate graceful shutdown
     *
     * @generated from protobuf rpc: Shutdown(spacemesh.v1.ShutdownRequest) returns (spacemesh.v1.ShutdownResponse);
     */
    shutdown(input: ShutdownRequest, options?: RpcOptions): UnaryCall<ShutdownRequest, ShutdownResponse>;
    /**
     * UpdatePoetServer updates poet server
     *
     * @generated from protobuf rpc: UpdatePoetServer(spacemesh.v1.UpdatePoetServerRequest) returns (spacemesh.v1.UpdatePoetServerResponse);
     */
    updatePoetServer(input: UpdatePoetServerRequest, options?: RpcOptions): UnaryCall<UpdatePoetServerRequest, UpdatePoetServerResponse>;
    // //////// Node streaming data

    /**
     * Node status events (sync and net)
     *
     * @generated from protobuf rpc: StatusStream(spacemesh.v1.StatusStreamRequest) returns (stream spacemesh.v1.StatusStreamResponse);
     */
    statusStream(input: StatusStreamRequest, options?: RpcOptions): ServerStreamingCall<StatusStreamRequest, StatusStreamResponse>;
    /**
     * Node error events
     *
     * @generated from protobuf rpc: ErrorStream(spacemesh.v1.ErrorStreamRequest) returns (stream spacemesh.v1.ErrorStreamResponse);
     */
    errorStream(input: ErrorStreamRequest, options?: RpcOptions): ServerStreamingCall<ErrorStreamRequest, ErrorStreamResponse>;
}
/**
 * Readonly basic node data
 *
 * @generated from protobuf service spacemesh.v1.NodeService
 */
export class NodeServiceClient implements INodeServiceClient, ServiceInfo {
    typeName = NodeService.typeName;
    methods = NodeService.methods;
    options = NodeService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * A simple test endpoint
     *
     * @generated from protobuf rpc: Echo(spacemesh.v1.EchoRequest) returns (spacemesh.v1.EchoResponse);
     */
    echo(input: EchoRequest, options?: RpcOptions): UnaryCall<EchoRequest, EchoResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EchoRequest, EchoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the version of the node software as a semver string
     *
     * @generated from protobuf rpc: Version(google.protobuf.Empty) returns (spacemesh.v1.VersionResponse);
     */
    version(input: Empty, options?: RpcOptions): UnaryCall<Empty, VersionResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, VersionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Returns the github commit hash used to build the node
     *
     * @generated from protobuf rpc: Build(google.protobuf.Empty) returns (spacemesh.v1.BuildResponse);
     */
    build(input: Empty, options?: RpcOptions): UnaryCall<Empty, BuildResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, BuildResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Current node status (net and sync)
     *
     * @generated from protobuf rpc: Status(spacemesh.v1.StatusRequest) returns (spacemesh.v1.StatusResponse);
     */
    status(input: StatusRequest, options?: RpcOptions): UnaryCall<StatusRequest, StatusResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<StatusRequest, StatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Request that the node start syncing the mesh
     *
     * @generated from protobuf rpc: SyncStart(spacemesh.v1.SyncStartRequest) returns (spacemesh.v1.SyncStartResponse);
     */
    syncStart(input: SyncStartRequest, options?: RpcOptions): UnaryCall<SyncStartRequest, SyncStartResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SyncStartRequest, SyncStartResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Request that the node initiate graceful shutdown
     *
     * @generated from protobuf rpc: Shutdown(spacemesh.v1.ShutdownRequest) returns (spacemesh.v1.ShutdownResponse);
     */
    shutdown(input: ShutdownRequest, options?: RpcOptions): UnaryCall<ShutdownRequest, ShutdownResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ShutdownRequest, ShutdownResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * UpdatePoetServer updates poet server
     *
     * @generated from protobuf rpc: UpdatePoetServer(spacemesh.v1.UpdatePoetServerRequest) returns (spacemesh.v1.UpdatePoetServerResponse);
     */
    updatePoetServer(input: UpdatePoetServerRequest, options?: RpcOptions): UnaryCall<UpdatePoetServerRequest, UpdatePoetServerResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePoetServerRequest, UpdatePoetServerResponse>("unary", this._transport, method, opt, input);
    }
    // //////// Node streaming data

    /**
     * Node status events (sync and net)
     *
     * @generated from protobuf rpc: StatusStream(spacemesh.v1.StatusStreamRequest) returns (stream spacemesh.v1.StatusStreamResponse);
     */
    statusStream(input: StatusStreamRequest, options?: RpcOptions): ServerStreamingCall<StatusStreamRequest, StatusStreamResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<StatusStreamRequest, StatusStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Node error events
     *
     * @generated from protobuf rpc: ErrorStream(spacemesh.v1.ErrorStreamRequest) returns (stream spacemesh.v1.ErrorStreamResponse);
     */
    errorStream(input: ErrorStreamRequest, options?: RpcOptions): ServerStreamingCall<ErrorStreamRequest, ErrorStreamResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ErrorStreamRequest, ErrorStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
