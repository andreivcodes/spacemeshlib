/* eslint-disable */
import type { CallContext, CallOptions } from "nice-grpc-common";
import { Empty } from "../../google/protobuf/empty";
import {
  CoinbaseResponse,
  EstimatedRewardsRequest,
  EstimatedRewardsResponse,
  IsSmeshingResponse,
  MinGasResponse,
  PostConfigResponse,
  PostSetupComputeProvidersRequest,
  PostSetupComputeProvidersResponse,
  PostSetupStatusResponse,
  PostSetupStatusStreamResponse,
  SetCoinbaseRequest,
  SetCoinbaseResponse,
  SetMinGasRequest,
  SetMinGasResponse,
  SmesherIDResponse,
  StartSmeshingRequest,
  StartSmeshingResponse,
  StopSmeshingRequest,
  StopSmeshingResponse,
} from "./smesher_types";

export const protobufPackage = "spacemesh.v1";

export type SmesherServiceDefinition = typeof SmesherServiceDefinition;
export const SmesherServiceDefinition = {
  name: "SmesherService",
  fullName: "spacemesh.v1.SmesherService",
  methods: {
    /** Returns true iff node is currently smeshing */
    isSmeshing: {
      name: "IsSmeshing",
      requestType: Empty,
      requestStream: false,
      responseType: IsSmeshingResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Starts smeshing, after completing the post setup.
     * Changing of the post setup options (e.g., number of units), after initial setup, is supported.
     * Returns success if request is accepted by node , failure if it fails
     */
    startSmeshing: {
      name: "StartSmeshing",
      requestType: StartSmeshingRequest,
      requestStream: false,
      responseType: StartSmeshingResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Stops smeshing, or the preceding post setup session, and optionally attempt to
     * delete the post setup data files(s).
     * Returns success if request is accepted by node, failure if it fails
     */
    stopSmeshing: {
      name: "StopSmeshing",
      requestType: StopSmeshingRequest,
      requestStream: false,
      responseType: StopSmeshingResponse,
      responseStream: false,
      options: {},
    },
    /** Get the current smesher id generated by the node */
    smesherID: {
      name: "SmesherID",
      requestType: Empty,
      requestStream: false,
      responseType: SmesherIDResponse,
      responseStream: false,
      options: {},
    },
    /** Get the current coinbase */
    coinbase: {
      name: "Coinbase",
      requestType: Empty,
      requestStream: false,
      responseType: CoinbaseResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Set the coinbase
     * Returns success if request succeeds, failure if it fails
     */
    setCoinbase: {
      name: "SetCoinbase",
      requestType: SetCoinbaseRequest,
      requestStream: false,
      responseType: SetCoinbaseResponse,
      responseStream: false,
      options: {},
    },
    /** Get the current min gas for including txs in blocks by this smesher */
    minGas: {
      name: "MinGas",
      requestType: Empty,
      requestStream: false,
      responseType: MinGasResponse,
      responseStream: false,
      options: {},
    },
    /**
     * Set a min gas units for including txs in blocks by this smesher
     * Returns success if request succeeds, failure if it fails
     */
    setMinGas: {
      name: "SetMinGas",
      requestType: SetMinGasRequest,
      requestStream: false,
      responseType: SetMinGasResponse,
      responseStream: false,
      options: {},
    },
    /** Estimate smeshing rewards over the next upcoming epoch */
    estimatedRewards: {
      name: "EstimatedRewards",
      requestType: EstimatedRewardsRequest,
      requestStream: false,
      responseType: EstimatedRewardsResponse,
      responseStream: false,
      options: {},
    },
    /** Returns the Post setup status */
    postSetupStatus: {
      name: "PostSetupStatus",
      requestType: Empty,
      requestStream: false,
      responseType: PostSetupStatusResponse,
      responseStream: false,
      options: {},
    },
    /** Returns a stream of updates for the Post setup status */
    postSetupStatusStream: {
      name: "PostSetupStatusStream",
      requestType: Empty,
      requestStream: false,
      responseType: PostSetupStatusStreamResponse,
      responseStream: true,
      options: {},
    },
    /** Returns a list of available Post setup compute providers */
    postSetupComputeProviders: {
      name: "PostSetupComputeProviders",
      requestType: PostSetupComputeProvidersRequest,
      requestStream: false,
      responseType: PostSetupComputeProvidersResponse,
      responseStream: false,
      options: {},
    },
    /** Returns the Post protocol config */
    postConfig: {
      name: "PostConfig",
      requestType: Empty,
      requestStream: false,
      responseType: PostConfigResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface SmesherServiceImplementation<CallContextExt = {}> {
  /** Returns true iff node is currently smeshing */
  isSmeshing(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<IsSmeshingResponse>>;
  /**
   * Starts smeshing, after completing the post setup.
   * Changing of the post setup options (e.g., number of units), after initial setup, is supported.
   * Returns success if request is accepted by node , failure if it fails
   */
  startSmeshing(
    request: StartSmeshingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StartSmeshingResponse>>;
  /**
   * Stops smeshing, or the preceding post setup session, and optionally attempt to
   * delete the post setup data files(s).
   * Returns success if request is accepted by node, failure if it fails
   */
  stopSmeshing(
    request: StopSmeshingRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<StopSmeshingResponse>>;
  /** Get the current smesher id generated by the node */
  smesherID(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<SmesherIDResponse>>;
  /** Get the current coinbase */
  coinbase(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<CoinbaseResponse>>;
  /**
   * Set the coinbase
   * Returns success if request succeeds, failure if it fails
   */
  setCoinbase(
    request: SetCoinbaseRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SetCoinbaseResponse>>;
  /** Get the current min gas for including txs in blocks by this smesher */
  minGas(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<MinGasResponse>>;
  /**
   * Set a min gas units for including txs in blocks by this smesher
   * Returns success if request succeeds, failure if it fails
   */
  setMinGas(request: SetMinGasRequest, context: CallContext & CallContextExt): Promise<DeepPartial<SetMinGasResponse>>;
  /** Estimate smeshing rewards over the next upcoming epoch */
  estimatedRewards(
    request: EstimatedRewardsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<EstimatedRewardsResponse>>;
  /** Returns the Post setup status */
  postSetupStatus(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<PostSetupStatusResponse>>;
  /** Returns a stream of updates for the Post setup status */
  postSetupStatusStream(
    request: Empty,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<PostSetupStatusStreamResponse>>;
  /** Returns a list of available Post setup compute providers */
  postSetupComputeProviders(
    request: PostSetupComputeProvidersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<PostSetupComputeProvidersResponse>>;
  /** Returns the Post protocol config */
  postConfig(request: Empty, context: CallContext & CallContextExt): Promise<DeepPartial<PostConfigResponse>>;
}

export interface SmesherServiceClient<CallOptionsExt = {}> {
  /** Returns true iff node is currently smeshing */
  isSmeshing(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<IsSmeshingResponse>;
  /**
   * Starts smeshing, after completing the post setup.
   * Changing of the post setup options (e.g., number of units), after initial setup, is supported.
   * Returns success if request is accepted by node , failure if it fails
   */
  startSmeshing(
    request: DeepPartial<StartSmeshingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StartSmeshingResponse>;
  /**
   * Stops smeshing, or the preceding post setup session, and optionally attempt to
   * delete the post setup data files(s).
   * Returns success if request is accepted by node, failure if it fails
   */
  stopSmeshing(
    request: DeepPartial<StopSmeshingRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<StopSmeshingResponse>;
  /** Get the current smesher id generated by the node */
  smesherID(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<SmesherIDResponse>;
  /** Get the current coinbase */
  coinbase(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<CoinbaseResponse>;
  /**
   * Set the coinbase
   * Returns success if request succeeds, failure if it fails
   */
  setCoinbase(
    request: DeepPartial<SetCoinbaseRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SetCoinbaseResponse>;
  /** Get the current min gas for including txs in blocks by this smesher */
  minGas(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<MinGasResponse>;
  /**
   * Set a min gas units for including txs in blocks by this smesher
   * Returns success if request succeeds, failure if it fails
   */
  setMinGas(request: DeepPartial<SetMinGasRequest>, options?: CallOptions & CallOptionsExt): Promise<SetMinGasResponse>;
  /** Estimate smeshing rewards over the next upcoming epoch */
  estimatedRewards(
    request: DeepPartial<EstimatedRewardsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<EstimatedRewardsResponse>;
  /** Returns the Post setup status */
  postSetupStatus(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PostSetupStatusResponse>;
  /** Returns a stream of updates for the Post setup status */
  postSetupStatusStream(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<PostSetupStatusStreamResponse>;
  /** Returns a list of available Post setup compute providers */
  postSetupComputeProviders(
    request: DeepPartial<PostSetupComputeProvidersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<PostSetupComputeProvidersResponse>;
  /** Returns the Post protocol config */
  postConfig(request: DeepPartial<Empty>, options?: CallOptions & CallOptionsExt): Promise<PostConfigResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };
